# coding: utf-8

"""
DefaultApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_modelrun(self, **kwargs):
        """

        This method is used to create a new model run.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_modelrun(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ModelRun modelrun: a Moldelrun object
        :return: ModelRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelrun']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_modelrun" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/modelruns'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'modelrun' in params:
            body_params = params['modelrun']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ModelRun',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_modelrun(self, modelrun_id, **kwargs):
        """

        This method is used to delete a model run and all its resources.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_modelrun(modelrun_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int modelrun_id: ID of ModelRun (required)
        :return: ModelRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelrun_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_modelrun" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'modelrun_id' is set
        if ('modelrun_id' not in params) or (params['modelrun_id'] is None):
            raise ValueError("Missing the required parameter `modelrun_id` when calling `delete_modelrun`")

        resource_path = '/modelruns/{modelrunId}'.replace('{format}', 'json')
        path_params = {}
        if 'modelrun_id' in params:
            path_params['modelrunId'] = params['modelrun_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ModelRun',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_model_progress(self, modelprogress_id, **kwargs):
        """

        This method is used to get a specific progress event while a model is running.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_model_progress(modelprogress_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int modelprogress_id: Id of ModelProgress (required)
        :return: ModelProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelprogress_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_progress" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'modelprogress_id' is set
        if ('modelprogress_id' not in params) or (params['modelprogress_id'] is None):
            raise ValueError("Missing the required parameter `modelprogress_id` when calling `get_model_progress`")

        resource_path = '/modelprogress/{modelprogressId}'.replace('{format}', 'json')
        path_params = {}
        if 'modelprogress_id' in params:
            path_params['modelprogressId'] = params['modelprogress_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ModelProgress',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_modelrun_by_id(self, modelrun_id, **kwargs):
        """

        This method is used to get a specific Modelrun by specifying the Id of the model run.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_modelrun_by_id(modelrun_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int modelrun_id: Id of ModelRun (required)
        :return: ModelRun
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelrun_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_modelrun_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'modelrun_id' is set
        if ('modelrun_id' not in params) or (params['modelrun_id'] is None):
            raise ValueError("Missing the required parameter `modelrun_id` when calling `get_modelrun_by_id`")

        resource_path = '/modelruns/{modelrunId}'.replace('{format}', 'json')
        path_params = {}
        if 'modelrun_id' in params:
            path_params['modelrunId'] = params['modelrun_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ModelRun',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def search_model_progress(self, **kwargs):
        """



        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_model_progress(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: The search query in the following JSON format:\n ```javascript\n   {\n    \"filters\": [{\n      \"name\": \"attribute_name\",\n      \"op\": \"operator_name\",\n      \"val\": \"value_to_compare\"\n    }],\n    \"order_by\": [{\n      \"field\": \"field_name_to_order_by\",\n      \"direction\": \"direction_of_order\"\n    }]\n  }\n```\nAn Example query might look like this:\n```javascript\n   {\n    \"filters\": [{\n      \"name\": \"modelrun_id\",\n      \"op\": \"eq\",\n      \"val\": 1\n    }],\n    \"order_by\": [{\n      \"field\": \"created_at\",\n      \"direction\": \"desc\"\n    }]\n  }\n```\n
        :return: QueryResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_model_progress" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/modelprogress'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'q' in params:
            query_params['q'] = params['q']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='QueryResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def search_modelruns(self, **kwargs):
        """

        This method is used to search for model runs specifying a query paramter.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_modelruns(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: search
        :return: list[QueryResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_modelruns" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/modelruns'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'q' in params:
            query_params['q'] = params['q']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='QueryResult',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def start_modelrun(self, modelrun_id, **kwargs):
        """

        This method enques a model run in the server after all necessary resources has been uploaded.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.start_modelrun(modelrun_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int modelrun_id: Id of Modelrun (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelrun_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_modelrun" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'modelrun_id' is set
        if ('modelrun_id' not in params) or (params['modelrun_id'] is None):
            raise ValueError("Missing the required parameter `modelrun_id` when calling `start_modelrun`")

        resource_path = '/modelruns/{modelrunId}/start'.replace('{format}', 'json')
        path_params = {}
        if 'modelrun_id' in params:
            path_params['modelrunId'] = params['modelrun_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def upload_resource_to_modelrun(self, modelrun_id, resource_type, file, **kwargs):
        """

        To upload a resource to a model run

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upload_resource_to_modelrun(modelrun_id, resource_type, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int modelrun_id: ID of ModelRun (required)
        :param str resource_type: resource type (required)
        :param file file: resource file (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['modelrun_id', 'resource_type', 'file']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_resource_to_modelrun" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'modelrun_id' is set
        if ('modelrun_id' not in params) or (params['modelrun_id'] is None):
            raise ValueError("Missing the required parameter `modelrun_id` when calling `upload_resource_to_modelrun`")
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params) or (params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `upload_resource_to_modelrun`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_resource_to_modelrun`")

        resource_path = '/modelruns/{modelrunId}/upload'.replace('{format}', 'json')
        path_params = {}
        if 'modelrun_id' in params:
            path_params['modelrunId'] = params['modelrun_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'resource_type' in params:
            form_params.append(('resource_type', params['resource_type']))
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
