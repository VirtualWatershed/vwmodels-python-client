# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ModelRun(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ModelRun - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'created_at': 'datetime',
            'model_name': 'str',
            'progress_state': 'str',
            'progress_value': 'float',
            'title': 'str',
            'user_id': 'int',
            'progress_events': 'list[ModelProgress]',
            'resources': 'list[ModelResource]'
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'created_at',
            'model_name': 'model_name',
            'progress_state': 'progress_state',
            'progress_value': 'progress_value',
            'title': 'title',
            'user_id': 'user_id',
            'progress_events': 'progress_events',
            'resources': 'resources'
        }

        self._id = None
        self._created_at = None
        self._model_name = None
        self._progress_state = None
        self._progress_value = None
        self._title = None
        self._user_id = None
        self._progress_events = None
        self._resources = None

    @property
    def id(self):
        """
        Gets the id of this ModelRun.


        :return: The id of this ModelRun.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ModelRun.


        :param id: The id of this ModelRun.
        :type: int
        """
        self._id = id

    @property
    def created_at(self):
        """
        Gets the created_at of this ModelRun.


        :return: The created_at of this ModelRun.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ModelRun.


        :param created_at: The created_at of this ModelRun.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def model_name(self):
        """
        Gets the model_name of this ModelRun.


        :return: The model_name of this ModelRun.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """
        Sets the model_name of this ModelRun.


        :param model_name: The model_name of this ModelRun.
        :type: str
        """
        self._model_name = model_name

    @property
    def progress_state(self):
        """
        Gets the progress_state of this ModelRun.


        :return: The progress_state of this ModelRun.
        :rtype: str
        """
        return self._progress_state

    @progress_state.setter
    def progress_state(self, progress_state):
        """
        Sets the progress_state of this ModelRun.


        :param progress_state: The progress_state of this ModelRun.
        :type: str
        """
        allowed_values = ["NOT_STARTED", "QUEUED", "RUNNING", "ERROR", "FINISHED"]
        if progress_state not in allowed_values:
            raise ValueError(
                "Invalid value for `progress_state`, must be one of {0}"
                .format(allowed_values)
            )
        self._progress_state = progress_state

    @property
    def progress_value(self):
        """
        Gets the progress_value of this ModelRun.


        :return: The progress_value of this ModelRun.
        :rtype: float
        """
        return self._progress_value

    @progress_value.setter
    def progress_value(self, progress_value):
        """
        Sets the progress_value of this ModelRun.


        :param progress_value: The progress_value of this ModelRun.
        :type: float
        """
        self._progress_value = progress_value

    @property
    def title(self):
        """
        Gets the title of this ModelRun.


        :return: The title of this ModelRun.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this ModelRun.


        :param title: The title of this ModelRun.
        :type: str
        """
        self._title = title

    @property
    def user_id(self):
        """
        Gets the user_id of this ModelRun.


        :return: The user_id of this ModelRun.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ModelRun.


        :param user_id: The user_id of this ModelRun.
        :type: int
        """
        self._user_id = user_id

    @property
    def progress_events(self):
        """
        Gets the progress_events of this ModelRun.


        :return: The progress_events of this ModelRun.
        :rtype: list[ModelProgress]
        """
        return self._progress_events

    @progress_events.setter
    def progress_events(self, progress_events):
        """
        Sets the progress_events of this ModelRun.


        :param progress_events: The progress_events of this ModelRun.
        :type: list[ModelProgress]
        """
        self._progress_events = progress_events

    @property
    def resources(self):
        """
        Gets the resources of this ModelRun.


        :return: The resources of this ModelRun.
        :rtype: list[ModelResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """
        Sets the resources of this ModelRun.


        :param resources: The resources of this ModelRun.
        :type: list[ModelResource]
        """
        self._resources = resources

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

